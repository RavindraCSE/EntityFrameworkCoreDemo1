// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebApp_EfCore1.DBFirstModels;

namespace WebApp_EfCore1.DBFirstModels
{
    public partial class FusionStackDbFirstContext
    {
        private IFusionStackDbFirstContextProcedures _procedures;

        public virtual IFusionStackDbFirstContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new FusionStackDbFirstContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IFusionStackDbFirstContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class FusionStackDbFirstContextProcedures : IFusionStackDbFirstContextProcedures
    {
        private readonly FusionStackDbFirstContext _context;

        public FusionStackDbFirstContextProcedures(FusionStackDbFirstContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetEmpByIdResult>> GetEmpByIdAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmpByIdResult>("EXEC @returnValue = [dbo].[GetEmpById] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmpById_with_OutputParamResult>> GetEmpById_with_OutputParamAsync(int? id, OutputParameter<int?> totalCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalCount = new SqlParameter
            {
                ParameterName = "TotalCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = totalCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmpById_with_OutputParamResult>("EXEC @returnValue = [dbo].[GetEmpById_with_OutputParam] @Id = @Id, @TotalCount = @TotalCount OUTPUT", sqlParameters, cancellationToken);

            totalCount?.SetValue(parameterTotalCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
